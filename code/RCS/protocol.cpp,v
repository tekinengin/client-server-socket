head	1.14;
access;
symbols;
locks;
comment	@// @;


1.14
date	2020.12.13.06.09.29;	author -;	state -;
branches;
next	1.13;

1.13
date	2020.12.10.01.09.28;	author -;	state -;
branches;
next	1.12;

1.12
date	2020.07.19.06.33.51;	author -;	state -;
branches;
next	1.11;

1.11
date	2020.02.25.02.35.42;	author -;	state -;
branches;
next	1.10;

1.10
date	2019.05.15.22.26.36;	author -;	state -;
branches;
next	1.9;

1.9
date	2019.04.05.23.45.29;	author -;	state -;
branches;
next	1.8;

1.8
date	2019.02.22.02.23.43;	author -;	state -;
branches;
next	1.7;

1.7
date	2018.07.13.00.39.08;	author -;	state -;
branches;
next	1.6;

1.6
date	2018.07.13.00.38.18;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.08.11.23.31.54;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.05.09.23.11.25;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.05.09.23.01.56;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.05.13.01.59.40;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.05.13.01.48.40;	author -;	state -;
branches;
next	;


desc
@@


1.14
log
@-
@
text
@// $Id: protocol.cpp,v 1.13 2020-12-09 17:09:28-08 - - $

#include <iomanip>
#include <iostream>
#include <string>
#include <unordered_map>
using namespace std;

#include "protocol.h"

string to_string (cxi_command command) {
   switch (command) {
      case cxi_command::ERROR  : return "ERROR"  ;
      case cxi_command::EXIT   : return "EXIT"   ;
      case cxi_command::GET    : return "GET"    ;
      case cxi_command::HELP   : return "HELP"   ;
      case cxi_command::LS     : return "LS"     ;
      case cxi_command::PUT    : return "PUT"    ;
      case cxi_command::RM     : return "RM"     ;
      case cxi_command::FILEOUT: return "FILEOUT";
      case cxi_command::LSOUT  : return "LSOUT"  ;
      case cxi_command::ACK    : return "ACK"    ;
      case cxi_command::NAK    : return "NAK"    ;
      default                  : return "????"   ;
   };
}


void send_packet (base_socket& socket,
                  const void* buffer, size_t bufsize) {
   const char* bufptr = static_cast<const char*> (buffer);
   ssize_t ntosend = bufsize;
   do {
      ssize_t nbytes = socket.send (bufptr, ntosend);
      if (nbytes < 0) throw socket_sys_error (to_string (socket));
      bufptr += nbytes;
      ntosend -= nbytes;
   }while (ntosend > 0);
}

void recv_packet (base_socket& socket, void* buffer, size_t bufsize) {
   char* bufptr = static_cast<char*> (buffer);
   ssize_t ntorecv = bufsize;
   do {
      ssize_t nbytes = socket.recv (bufptr, ntorecv);
      if (nbytes < 0) throw socket_sys_error (to_string (socket));
      if (nbytes == 0) throw socket_error (to_string (socket)
                                           + " is closed");
      bufptr += nbytes;
      ntorecv -= nbytes;
   }while (ntorecv > 0);
}


string to_hex32_string (uint32_t num) {
   ostringstream stream;
   stream << "0x" << hex << uppercase << setfill('0') << setw(8) << num;
   return stream.str();
}

ostream& operator<< (ostream& out, const cxi_header& header) {
   return out << "{" << to_hex32_string (header.nbytes) << ':'
              << header.nbytes << ':' << ntohl (header.nbytes) << ","
              << unsigned (header.command)
              << "(" << to_string (header.command) << "),\""
              << header.filename << "\"}";
}    

string get_cxi_server_host (const vector<string>& args, size_t index) {
   if (index < args.size()) return args[index];
   char* host = getenv ("CIX_SERVER_HOST");
   if (host != nullptr) return host;
   return "localhost";
}

in_port_t get_cxi_server_port (const vector<string>& args,
                               size_t index) {
   string port = "-1";
   if (index < args.size()) port = args[index];
   else {
      char* envport = getenv ("CIX_SERVER_PORT");
      if (envport != nullptr) port = envport;
   }
   return stoi (port);
}
     
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.12 2020-07-18 23:33:51-07 - - $
d3 2
d55 6
d62 5
a66 5
   string code = to_string (header.command);
   out << "{" << header.nbytes << ':' << ntohl (header.nbytes) << ","
       << unsigned (header.command)
       << "(" << code << "),\"" << header.filename << "\"}";
   return out;
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.11 2020-02-24 18:35:42-08 - - $
d55 3
a57 3
   cout << "{" << ntohl (header.nbytes) << ","
        << unsigned (header.command)
        << "(" << code << "),\"" << header.filename << "\"}";
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.10 2019-05-15 15:26:36-07 - - $
d9 1
a9 1
string to_string (cix_command command) {
d11 11
a21 11
      case cix_command::ERROR  : return "ERROR"  ;
      case cix_command::EXIT   : return "EXIT"   ;
      case cix_command::GET    : return "GET"    ;
      case cix_command::HELP   : return "HELP"   ;
      case cix_command::LS     : return "LS"     ;
      case cix_command::PUT    : return "PUT"    ;
      case cix_command::RM     : return "RM"     ;
      case cix_command::FILEOUT: return "FILEOUT";
      case cix_command::LSOUT  : return "LSOUT"  ;
      case cix_command::ACK    : return "ACK"    ;
      case cix_command::NAK    : return "NAK"    ;
d53 1
a53 1
ostream& operator<< (ostream& out, const cix_header& header) {
d61 1
a61 1
string get_cix_server_host (const vector<string>& args, size_t index) {
d68 1
a68 1
in_port_t get_cix_server_port (const vector<string>& args,
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.9 2019-04-05 16:45:29-07 - - $
d55 2
a56 1
   cout << "{" << header.nbytes << "," << unsigned (header.command)
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.8 2019-02-21 18:23:43-08 - - $
a2 1
#include <cassert>
a28 1
   assert (sizeof (cix_header) == HEADER_SIZE);
a39 1
   assert (sizeof (cix_header) == HEADER_SIZE);
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.7 2018-07-12 17:39:08-07 - - $
d10 16
a25 19
struct cix_hasher {
   size_t operator() (cix_command cmd) const {
      return static_cast<uint8_t> (cmd);
   }
};

const unordered_map<cix_command,string,cix_hasher> cix_command_map {
   {cix_command::ERROR  , "ERROR"  },
   {cix_command::EXIT   , "EXIT"   },
   {cix_command::GET    , "GET"    },
   {cix_command::HELP   , "HELP"   },
   {cix_command::LS     , "LS"     },
   {cix_command::PUT    , "PUT"    },
   {cix_command::RM     , "RM"     },
   {cix_command::FILEOUT, "FILEOUT"},
   {cix_command::LSOUT  , "LSOUT"  },
   {cix_command::ACK    , "ACK"    },
   {cix_command::NAK    , "NAK"    },
};
d57 1
a57 2
   const auto& itor = cix_command_map.find (header.command);
   string code = itor == cix_command_map.end() ? "?" : itor->second;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.6 2018-07-12 17:38:18-07 - - $
d17 11
a27 11
   {cix_command::ERROR, "ERROR"},
   {cix_command::EXIT , "EXIT" },
   {cix_command::GET  , "GET"  },
   {cix_command::HELP , "HELP" },
   {cix_command::LS   , "LS"   },
   {cix_command::PUT  , "PUT"  },
   {cix_command::RM   , "RM"   },
   {cix_command::FILE , "FILE" },
   {cix_command::LSOUT, "LSOUT"},
   {cix_command::ACK  , "ACK"  },
   {cix_command::NAK  , "NAK"  },
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.5 2016-08-11 16:31:54-07 - - $
d3 2
a5 1
#include <string>
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.4 2016-05-09 16:11:25-07 - - $
d32 1
d44 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.3 2016-05-09 16:01:56-07 - - $
d59 1
a59 1
   cout << "{" << header.nbytes << "," << uint8_t (header.command)
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.2 2015-05-12 18:59:40-07 - - $
d55 1
d59 2
a60 3
   cout << "{" << header.nbytes << "," << code << "="
        << uint8_t (header.command) << ",\"" << header.filename
        << "\"}";
a63 1

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.1 2015-05-12 18:48:40-07 - - $
d9 18
a26 12
const unordered_map<int,string> cix_command_map {
   {int (CIX_ERROR), "CIX_ERROR"},
   {int (CIX_EXIT ), "CIX_EXIT" },
   {int (CIX_GET  ), "CIX_GET"  },
   {int (CIX_HELP ), "CIX_HELP" },
   {int (CIX_LS   ), "CIX_LS"   },
   {int (CIX_PUT  ), "CIX_PUT"  },
   {int (CIX_RM   ), "CIX_RM"   },
   {int (CIX_FILE ), "CIX_FILE" },
   {int (CIX_LSOUT), "CIX_LSOUT"},
   {int (CIX_ACK  ), "CIS_ACK"  },
   {int (CIX_NAK  ), "CIS_NAK"  },
d59 1
a59 1
        << int (header.command) << ",\"" << header.filename
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.1 2015-05-12 18:48:18-07 - - $
d50 1
a50 1
   const auto& itor = cix_command_map.find (header.cix_command);
d52 2
a53 2
   cout << "{" << header.cix_nbytes << "," << code << "="
        << int (header.cix_command) << ",\"" << header.cix_filename
@
