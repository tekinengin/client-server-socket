head	1.15;
access;
symbols;
locks;
comment	@// @;


1.15
date	2020.11.30.19.46.08;	author -;	state -;
branches;
next	1.14;

1.14
date	2020.11.30.19.45.21;	author -;	state -;
branches;
next	1.13;

1.13
date	2020.11.30.19.39.56;	author -;	state -;
branches;
next	1.12;

1.12
date	2020.11.30.19.38.44;	author -;	state -;
branches;
next	1.11;

1.11
date	2020.11.30.19.38.12;	author -;	state -;
branches;
next	1.10;

1.10
date	2019.11.22.00.10.16;	author -;	state -;
branches;
next	1.9;

1.9
date	2019.11.22.00.09.32;	author -;	state -;
branches;
next	1.8;

1.8
date	2019.11.22.00.09.20;	author -;	state -;
branches;
next	1.7;

1.7
date	2019.11.22.00.09.03;	author -;	state -;
branches;
next	1.6;

1.6
date	2019.11.21.23.01.07;	author -;	state -;
branches;
next	1.5;

1.5
date	2019.11.21.22.59.23;	author -;	state -;
branches;
next	1.4;

1.4
date	2019.11.21.22.57.56;	author -;	state -;
branches;
next	1.3;

1.3
date	2019.11.21.22.57.39;	author -;	state -;
branches;
next	1.2;

1.2
date	2019.11.21.22.56.49;	author -;	state -;
branches;
next	1.1;

1.1
date	2019.11.21.22.50.40;	author -;	state -;
branches;
next	;


desc
@@


1.15
log
@-
@
text
@// $Id: lsfile.cpp,v 1.14 2020-11-30 11:45:21-08 - - $

// NAME
//    lsfile - print output similar to ls(1) command
// SYNOPSIS
//    lsfile filename...
// DESCRIPTION
//    Calls the stat(2) system call and prints out struct stat
//    information about the file.

#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <stdexcept>
#include <string>
using namespace std;

#include <libgen.h>
#include <pwd.h>
#include <sys/stat.h>

class failure: public exception {};

using num_base = ios_base& (*) (ios_base&);

void lsfile (const char* filename) {
   struct stat stat_buf;
   if (stat (filename, &stat_buf) != 0) throw failure();
   struct tm time_tm;
   localtime_r (&stat_buf.st_mtim.tv_sec, &time_tm);
   char time_str[64];
   strftime (time_str, sizeof time_str, "%Y-%m-%d %T", &time_tm);
   auto passwd_buf = getpwuid (stat_buf.st_uid);
   if (passwd_buf == nullptr) throw failure();
   cout << oct << setfill('0') << setw(6) << stat_buf.st_mode
        << dec << setfill(' ') << setw(2) << stat_buf.st_nlink
        << setw(10) << passwd_buf->pw_name
        << setw(12) << stat_buf.st_size
        << " " << time_str
        << " " << filename << endl;
}

int main (int argc, char** argv) {
   string exec_name = basename (argv[0]);
   int exit_status = EXIT_SUCCESS;
   if (argc < 2) {
      cerr << "Usage: " << exec_name << " filename..." << endl;
      exit_status = EXIT_FAILURE;
   }else {
      for (auto argp = &argv[1]; argp != &argv[argc]; ++argp) {
         try {
            lsfile (*argp);
         }catch (failure&) {
            cerr << exec_name << ": " << *argp << ": "
                 << strerror (errno) << endl;
         }
      }
   }
   return exit_status;
}

//
// The  following mask values are defined for the file type of the
// st_mode field:
//
//     S_IFMT     0170000   bit mask for the file type bit field
//     S_IFSOCK   0140000   socket
//     S_IFLNK    0120000   symbolic link
//     S_IFREG    0100000   regular file
//     S_IFBLK    0060000   block device
//     S_IFDIR    0040000   directory
//     S_IFCHR    0020000   character device
//     S_IFIFO    0010000   FIFO
//
// The  following mask values are defined for the file mode compo-
// nent of the st_mode field:
//
//     S_ISUID     04000   set-user-ID bit
//     S_ISGID     02000   set-group-ID bit (see below)
//     S_ISVTX     01000   sticky bit (see below)
//
//     S_IRUSR     00400   owner has read permission
//     S_IWUSR     00200   owner has write permission
//     S_IXUSR     00100   owner has execute permission
//
//     S_IRGRP     00040   group has read permission
//     S_IWGRP     00020   group has write permission
//     S_IXGRP     00010   group has execute permission
//
//     S_IROTH     00004   others have read permission
//     S_IWOTH     00002   others have write permission
//     S_IXOTH     00001   others have execute permission
//
// The set-group-ID bit (S_ISGID) has several special uses.  For a
// directory, it indicates that BSD semantics is to  be  used  for
// that directory: files created there inherit their group ID from
// the directory, not from the effective group ID of the  creating
// process,  and  directories  created  there  will  also  get the
// S_ISGID bit set.  For a file that does not have the group  exe-
// cution bit (S_IXGRP) set, the set-group-ID bit indicates manda-
// tory file/record locking.
//
// The sticky bit (S_ISVTX) on a directory means that  a  file  in
// that  directory  can be renamed or deleted only by the owner of
// the file, by the owner of the directory, and  by  a  privileged
// process.
//
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.13 2020-11-30 11:39:56-08 - - $
a67 1
//
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.12 2020-11-30 11:38:44-08 - - $
d63 47
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.11 2020-11-30 11:38:12-08 - - $
d36 1
a36 1
   cout << oct << setfill('0') << setw(7) << stat_buf.st_mode
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.10 2019-11-21 16:10:16-08 - - $
d36 1
a36 2
   cout << showbase << oct << setfill('0') << setw(7)
                    << stat_buf.st_mode
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.9 2019-11-21 16:09:32-08 - - $
d36 3
a38 2
   cout << showbase << oct << setw(7) << stat_buf.st_mode << dec
        << setw(2) << stat_buf.st_nlink
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.8 2019-11-21 16:09:20-08 - - $
d39 1
a39 1
        << setw(8) << stat_buf.st_size
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.7 2019-11-21 16:09:03-08 - - $
d38 1
a38 1
        << setw(10) << passwd_buf->pw_name;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.6 2019-11-21 15:01:07-08 - - $
d20 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.5 2019-11-21 14:59:23-08 - - $
d33 2
d37 1
a37 1
        << setw(10) << stat_buf.st_uid
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.4 2019-11-21 14:57:56-08 - - $
d32 1
a32 1
   strftime (time_str, sizeof time_str, "%Y-%m-%d %T %Z", &time_tm);
d35 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.3 2019-11-21 14:57:39-08 - - $
a25 7
template <typename number>
void show (number value, const string& label,
           num_base base = std::dec) {
   cout << setw(12) << showbase << base << value << " " << label
        << endl << dec;
}

d33 1
a33 1
   cout << showbase << oct << setw(7) << stat_buf.st_mode
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.2 2019-11-21 14:56:49-08 - - $
d37 1
a37 1
   localtime_r (stat_buf.st_mtim.tv_sec, &time_tm);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.1 2019-11-21 14:50:40-08 - - $
d37 1
a37 1
   localtime_r (stat_buf.st_mtime.tv_sec, &time_tm);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: lsfile.cpp,v 1.1 2019-11-21 13:22:37-08 - - $
a32 8
void showtime (const struct timespec spec, const string& label) {
   struct tm time_buf;
   localtime_r (&spec.tv_sec, &time_buf);
   char buffer[64];
   strftime (buffer, sizeof buffer, "%Y-%m-%d %T %Z", &time_buf);
   cout << buffer << " " << label << endl;
}

d36 9
a44 14
   cout << filename << ":" << endl;
   show (stat_buf.st_dev,     "ID of device containing file"   );
   show (stat_buf.st_ino,     "inode number"                   );
   show (stat_buf.st_mode,    "file type and mode", oct        );
   show (stat_buf.st_nlink,   "number of hard links"           );
   show (stat_buf.st_uid,     "user ID of owner"               );
   show (stat_buf.st_gid,     "group ID of owner"              );
   show (stat_buf.st_rdev,    "device ID (if special file)"    );
   show (stat_buf.st_size,    "total size, in bytes"           );
   show (stat_buf.st_blksize, "blocksize for filesystem I/O"   );
   show (stat_buf.st_blocks,  "number of 512B blocks allocated");
   showtime (stat_buf.st_atim, "time of last access"        );
   showtime (stat_buf.st_mtim, "time of last modification"  );
   showtime (stat_buf.st_ctim, "time of last status change" );
@
