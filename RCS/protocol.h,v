head	1.9;
access;
symbols;
locks;
comment	@ * @;


1.9
date	2020.12.13.06.09.29;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.07.19.06.33.51;	author -;	state -;
branches;
next	1.7;

1.7
date	2019.05.15.22.26.36;	author -;	state -;
branches;
next	1.6;

1.6
date	2019.02.22.02.23.43;	author -;	state -;
branches;
next	1.5;

1.5
date	2018.07.13.00.38.18;	author -;	state -;
branches;
next	1.4;

1.4
date	2018.07.13.00.34.43;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.05.09.23.01.56;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.05.13.01.59.40;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.05.13.01.48.40;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// $Id: protocol.h,v 1.8 2020-07-18 23:33:51-07 - - $

#ifndef __PROTOCOL__H__
#define __PROTOCOL__H__

#include <cstdint>
using namespace std;

#include "sockets.h"

enum class cxi_command : uint8_t {
   ERROR = 0, EXIT, GET, HELP, LS, PUT, RM, FILEOUT, LSOUT, ACK, NAK,
};
constexpr size_t FILENAME_SIZE = 59;
constexpr size_t HEADER_SIZE = 64;
struct cxi_header {
   uint32_t nbytes {};
   cxi_command command {cxi_command::ERROR};
   char filename[FILENAME_SIZE] {};
};

static_assert (sizeof (cxi_header) == HEADER_SIZE);

void send_packet (base_socket& socket,
                  const void* buffer, size_t bufsize);

void recv_packet (base_socket& socket, void* buffer, size_t bufsize);

ostream& operator<< (ostream& out, const cxi_header& header);

string get_cxi_server_host (const vector<string>& args, size_t index);

in_port_t get_cxi_server_port (const vector<string>& args,
                               size_t index);

#endif

@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.h,v 1.7 2019-05-15 15:26:36-07 - - $
a6 2
#include <cstring>
#include <iostream>
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.h,v 1.6 2019-02-21 18:23:43-08 - - $
d13 1
a13 1
enum class cix_command : uint8_t {
d18 1
a18 1
struct cix_header {
d20 1
a20 1
   cix_command command {cix_command::ERROR};
d24 1
a24 1
static_assert (sizeof (cix_header) == HEADER_SIZE);
d31 1
a31 1
ostream& operator<< (ostream& out, const cix_header& header);
d33 1
a33 1
string get_cix_server_host (const vector<string>& args, size_t index);
d35 1
a35 1
in_port_t get_cix_server_port (const vector<string>& args,
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.h,v 1.5 2018-07-12 17:38:18-07 - - $
d23 2
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.h,v 1.4 2018-07-12 17:34:43-07 - - $
d14 1
a14 1
   ERROR = 0, EXIT, GET, HELP, LS, PUT, RM, FILE, LSOUT, ACK, NAK,
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.h,v 1.3 2016-05-09 16:01:56-07 - - $
d17 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.h,v 1.2 2015-05-12 18:59:40-07 - - $
d16 1
a16 1
size_t constexpr FILENAME_SIZE = 59;
d18 1
a18 1
   uint32_t nbytes {0};
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.h,v 1.1 2015-05-12 18:48:40-07 - - $
d13 3
a15 4
enum cix_command {CIX_ERROR = 0, CIX_EXIT,
                  CIX_GET, CIX_HELP, CIX_LS, CIX_PUT, CIX_RM,
                  CIX_FILE, CIX_LSOUT, CIX_ACK, CIX_NAK};

d19 1
a19 1
   uint8_t command {0};
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.h,v 1.1 2015-05-12 18:48:18-07 - - $
d17 1
a17 1
size_t constexpr CIX_FILENAME_SIZE = 59;
d19 3
a21 3
   uint32_t cix_nbytes {0};
   uint8_t cix_command {0};
   char cix_filename[CIX_FILENAME_SIZE] {};
@
