head	1.11;
access;
symbols;
locks;
comment	@// @;


1.11
date	2019.05.08.18.33.31;	author -;	state -;
branches;
next	1.10;

1.10
date	2019.02.07.23.29.45;	author -;	state -;
branches;
next	1.9;

1.9
date	2019.02.07.23.25.47;	author -;	state -;
branches;
next	1.8;

1.8
date	2019.02.07.23.24.57;	author -;	state -;
branches;
next	1.7;

1.7
date	2019.02.07.23.24.28;	author -;	state -;
branches;
next	1.6;

1.6
date	2019.02.07.23.23.58;	author -;	state -;
branches;
next	1.5;

1.5
date	2019.02.07.23.22.25;	author -;	state -;
branches;
next	1.4;

1.4
date	2019.02.07.23.22.08;	author -;	state -;
branches;
next	1.3;

1.3
date	2019.02.07.23.21.55;	author -;	state -;
branches;
next	1.2;

1.2
date	2019.02.07.23.21.19;	author -;	state -;
branches;
next	1.1;

1.1
date	2019.02.07.23.20.14;	author -;	state -;
branches;
next	;


desc
@@


1.11
log
@-
@
text
@// $Id: makeunique.cpp,v 1.10 2019-02-07 15:29:45-08 - - $

//
// Example of using a unique_ptr to point at dynamically
// allocated local data.  C++ does not allow local arrays
// to be given a dynamic size, as in "char c[n]".
//

#include <cstring>
#include <iostream>
#include <memory>
using namespace std;

int main() {
   const char* const data = "$RCSfile: makeunique.cpp,v $";
   const size_t datalen = strlen (data) + 1;
   auto buffer = make_unique<char[]> (strlen (data) + 1);
   strncpy (buffer.get(), data, datalen);
   cout << "buffer=\"" << buffer.get() << "\"" << endl;
}

//TEST// alias grind='valgrind --leak-check=full --show-reachable=yes'
//TEST// grind makeunique >makeunique.out 2>&1
//TEST// mkpspdf makeunique.ps makeunique.cpp* makeunique.out

@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: makeunique.cpp,v 1.9 2019-02-07 15:25:47-08 - - $
d16 1
a16 1
   const size_t datalen = strlen (data);
@


1.9
log
@-
@
text
@d1 7
a7 1
// $Id: makeunique.cpp,v 1.8 2019-02-07 15:24:57-08 - - $
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: makeunique.cpp,v 1.7 2019-02-07 15:24:28-08 - - $
d13 1
a13 1
   cout << buffer.get() << endl;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: makeunique.cpp,v 1.6 2019-02-07 15:23:58-08 - - $
d17 1
a17 1
//TEST// grind makeunique >makeunique.out.out 2>&1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: makeunique.cpp,v 1.5 2019-02-07 15:22:25-08 - - $
d10 1
a10 1
   const len = strlen (data);
d12 1
a12 1
   strncpy (buffer.get(), data, len);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: makeunique.cpp,v 1.4 2019-02-07 15:22:08-08 - - $
d10 3
a12 2
   auto buffer = make_unique<char[]> (strlen (data));
   strcpy (buffer.get(), data);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: makeunique.cpp,v 1.3 2019-02-07 15:21:55-08 - - $
d11 1
a11 1
   strcpy (buffer.get(), buffer);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: makeunique.cpp,v 1.2 2019-02-07 15:21:19-08 - - $
d9 1
a9 1
   const char* const data = "$RCSfile: makeunique.cpp,v $
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: makeunique.cpp,v 1.1 2019-02-07 15:20:14-08 - - $
d11 1
a11 1
   strcpy (buffer.get(), data);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: unique_ptr.cpp,v 1.1 2019-02-07 15:18:33-08 - - $
d9 1
a9 1
   const char* const data = "$RCSfile: unique_ptr.cpp,v $
d15 4
a18 3
alias grind='valgrind --leak-check=full --show-reachable=yes'
grind unique_ptr
//TEST// mkpspdf unique_ptr.cpp.ps unique_ptr.cpp
@
